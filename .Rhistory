# Profile=drpdfromts(pair1$Resp1, pair1$Resp2,datatype = 'continuous',ws=50, radius=10)
# str(Profile)
# #Take profile and mulitple by 100 to represent recurrence as a percent
# profile = Profile$profile*100
#To plot the lags properly on the x axis, we have to recsontruct the timecourse of the lags from the ws information.
# timecourse = round( seq(-5000,5000,100)/1000, digit = 1)
#
# #Take lag at where maximal recurrence is observed
# mxlag = Profile$maxlag
#
# Prof=data.frame(profile)
#upSample(Prof, pair1)
#downSample(pair1, Prof)
# ggplot(Prof, aes(timecourse,profile))+geom_line() + geom_vline(xintercept = timecourse[mxlag], colour='red')
# paste("maxlag:", timecourse[Profile$mxlag], "sec."),
#        at = timecourse[Profile$mxlag] + 1.2, side = 3, col = "red", line = -1.2, cex = .8)
#We get a larger timecourse, which shows more data, our maxlag is 1.6 sec.
#
#
# #Just to see what happens if we zoom in
# #Make plot of respiration signal, to estimate if data is usable
# #Make a recurrence profile.
#
# #Make plot of respiration signal, to estimate if data is usable
# #Make a recurrence profile.
#
# Profile=drpdfromts(pair1$Resp1, pair1$Resp2,datatype = 'continuous',ws=100, radius=10)
# str(Profile)
# #Take profile and mulitple by 100 to represent recurrence as a percent
# profile = Profile$profile*100
#
# #To plot the lags properly on the x axis, we have to recsontruct the timecourse of the lags from the ws information.
# timecourse = round( seq(-3800,3800,38)/1000, digit = 1)
#
# #Take lag at where maximal recurrence is observed
# mxlag2 = Profile$maxlag
#
# Prof2=data.frame(profile)
# #upSample(Prof, pair1)
# #downSample(pair1, Prof)
# ggplot(Prof2, aes(timecourse,profile))+geom_line()+ geom_vline(xintercept = timecourse[mxlag], colour='red')
# # paste("maxlag:", timecourse[Profile$mxlag], "sec."),
# #        at = timecourse[Profile$mxlag] + 1.2, side = 3, col = "red", line = -1.2, cex = .8)
#
# #We get a very different graph, but keep same max lag (1.6 sec.), but we get a more accurate view.
#
# #
# Chunk 4
#Load a random pair, synchronous condition
pair5_Sync = read.table("~/R/R - Datascripts/Assignment 4/Heart-and-Respiration/CleanData/Study2_G5_T1_Synchronous.csv", header=T, sep = ",")
pair5_TT = read.table("~/R/R - Datascripts/Assignment 4/Heart-and-Respiration/CleanData/Study2_G5_T2_TurnTaking.csv", header=T, sep = ",")
#Remove outliers!
#Outlier removal function:
removeOuts <- function(ts,threshold){
ts[ts > (mean(ts, na.rm = TRUE) +
(threshold*sd(ts,na.rm = TRUE))) |
ts <(mean(ts, na.rm = TRUE) -
(threshold*sd(ts,na.rm = TRUE)))] =
mean(ts, na.rm = TRUE)
return(ts)}
#Sync condition___________________________________________________________________________________
#Downsampling! IT MAKES SENSE NOW!!!
#Syn data condition
library(groupdata2)
Sync_data = pair5 %>%
group(n = 100, method= "greedy") %>%
dplyr::summarise(
time = mean(time, na.rm = T),
Resp1 = mean(Resp1, na.rm = T),
Resp2 = mean(Resp2, na.rm = T),
HR1 = mean(HR1, na.rm = T),
HR2 = mean(HR2, na.rm = T))
#First plot, looks messy
ggplot(Sync_data, aes(time)) +
geom_line(aes(y = Resp1, colour = "Resp1")) +
geom_line(aes(y = Resp2, colour = "Resp2"))
#Use function
#Sync, remove outliers
threshold = 2.5
Sync_data$Resp1 = removeOuts(Sync_data$Resp1, threshold)
Sync_data$Resp2 = removeOuts(Sync_data$Resp2, threshold)
Sync_data$HR1 = removeOuts(Sync_data$HR1, threshold)
Sync_data$HR2 = removeOuts(Sync_data$HR2, threshold)
#Second plot after removal function - Sync
ggplot(Sync_data, aes(time)) +
geom_line(aes(y = Resp1, colour = "Resp1")) +
geom_line(aes(y = Resp2, colour = "Resp2"))
ggplot(Sync_data, aes(time)) +
geom_line(aes(y = HR1, colour = "HR1")) +
geom_line(aes(y = HR2, colour = "HR2"))
#Scale the two respirations to same baseline(ish), so it's easier to compare
#Scaling the signals:
#Sync
Sync_data$Resp1S=scale(Sync_data$Resp1)
Sync_data$Resp2S=scale(Sync_data$Resp2)
Sync_data$HR1S=scale(Sync_data$HR1)
Sync_data$HR2S=scale(Sync_data$HR2)
Sync_plot_RP <- ggplot(Sync_data, aes(time)) +
geom_line(aes(y = Resp1S, colour = "Resp1")) +
geom_line(aes(y = Resp2S, colour = "Resp2")) +
geom_hline(yintercept=0, col = "grey") +
labs(title = "Syncronised Data")
Sync_plot_RP
Sync_plot_HR <-ggplot(Sync_data, aes(time)) +
geom_line(aes(y = HR1S, colour = "HR1")) +
geom_line(aes(y = HR2S, colour = "HR2")) +
geom_hline(yintercept=0, col = "grey") +
labs(title = "Syncronised Data")
Sync_plot_HR
#Turn Taking Condition____________________________________________________________________________
#TT
TT_data = pair5 %>%
group(n = 100, method= "greedy") %>%
dplyr::summarise(
time = mean(time, na.rm = T),
Resp1 = mean(Resp1, na.rm = T),
Resp2 = mean(Resp2, na.rm = T),
HR1 = mean(HR1, na.rm = T),
HR2 = mean(HR2, na.rm = T))
#TT Remove outliers
threshold = 2.5
TT_data$Resp1 = removeOuts(TT_data$Resp1, threshold)
TT_data$Resp2 = removeOuts(TT_data$Resp2, threshold)
TT_data$HR1 = removeOuts(TT_data$HR1, threshold)
TT_data$HR2 = removeOuts(TT_data$HR2, threshold)
#TT scale
TT_data$Resp1S=scale(TT_data$Resp1)
TT_data$Resp2S=scale(TT_data$Resp2)
TT_data$HR1S=scale(TT_data$HR1)
TT_data$HR2S=scale(TT_data$HR2)
#TT Finished plots
TT_plot_RP <- ggplot(TT_data, aes(time)) +
geom_line(aes(y = Resp1S, colour = "Resp1TT")) +
geom_line(aes(y = Resp2S, colour = "Resp2TT")) +
geom_hline(yintercept=0, col = "grey") +
labs(title = "Turn Taking Data")
TT_plot_RP
TT_plot_HR <-ggplot(TT_data, aes(time)) +
geom_line(aes(y = HR1S, colour = "HR1TT")) +
geom_line(aes(y = HR2S, colour = "HR2TT")) +
geom_hline(yintercept=0, col = "grey") +
labs(title = "Turn Taking Data")
TT_plot_HR
#Put plots together
gridExtra::grid.arrange(Sync_plot_RP, Sync_plot_HR, TT_plot_RP, TT_plot_HR)
# Chunk 5
#Sync Condition _________________________________________________________________________________
#Respiration
#optimize paramters
par = list(lgM =  35, radiusspan = 400, radiussample = 10, normalize = 0, rescale = 1, mindiagline = 2,
minvertline = 2, tw = 0, whiteline = FALSE, recpt = FALSE, fnnpercent = 10, typeami = "maxlag")
#Use function
optimizeParam(Sync_data$Resp1S, Sync_data$Resp2S, par, min.rec = 2, max.rec = 5)
#Use results for crqa
Sync_RP_CRQA <- try(crqa(Sync_data$Resp1S, Sync_data$Resp2S, embed = 19, delay = 33, radius = 66.77911, normalize = 0, rescale = 2, mindiagline = 2, minvertline = 2))
SyncRP_df <- data.frame(Sync_RP1_CRQA$RR, Sync_RP1_CRQA$DET, Sync_RP1_CRQA$NRLINE, Sync_RP1_CRQA$maxL,Sync_RP1_CRQA$L, Sync_RP1_CRQA$ENTR, Sync_RP1_CRQA$LAM, Sync_RP1_CRQA$TT)
#Plot crqa
Sync_RP=Sync_RP_CRQA$RP
Sync_RP_plot = matrix(as.numeric(Sync_RP), nrow = ncol(Sync_RP))
cols = c("white","blue4")
image(Sync_RP1, xlab = "", ylab = "", col = cols)
Sync_RP_plot
#Heartrate
#optimize paramters
optimizeParam(Sync_data$HR1S, Sync_data$HR2S, par, min.rec = 2, max.rec = 5)
#Use results for crqa
HR_Sync_CRQA <- try(crqa(Sync_data$HR1S,Sync_data$HR2S, embed = 11, delay = 34, radius = 43.65291, normalize = 0, rescale = 2, mindiagline = 2, minvertline = 2))
HR_Sync_CRQA
# HR_Sync12 <- c(HR_Sync1$RR, HR_Sync1$DET, HR_Sync1$NRLINE, HR_Sync1$maxL, HR_Sync1$L, HR_Sync1$ENTR, HR_Sync1$LAM, HR_Sync1$TT)
SyncHR_df <- data.frame(HR_Sync_CRQA$RR, HR_Sync_CRQA$DET, HR_Sync_CRQA$NRLINE, HR_Sync_CRQA$maxL,HR_Sync_CRQA$L, HR_Sync_CRQA$ENTR, HR_Sync_CRQA$LAM, HR_Sync_CRQA$TT)
#Plot crqa
HR_Sync=HR_Sync_CRQA$RP
Sync_HR_plot = matrix(as.numeric(HR_Sync), nrow = ncol(HR_Sync))
cols = c("white","blue4")
image(Sync_HR_plot, xlab = "", ylab = "", col = cols)
grobs = list(Sync_HR_plot, HR_Sync)
Sync_HR_plot
gridExtra::grid.arrange(Sync_HR_plot, Sync_RP_plot)
#Turn Taking Condition ___________________________________________________________________
#Respiration
#optimize paramters
optimizeParam(ts1T, ts2T, par, min.rec = 2, max.rec = 5)
par = list(lgM =  35, radiusspan = 400, radiussample = 10, normalize = 0, rescale = 1, mindiagline = 2,
minvertline = 2, tw = 0, whiteline = FALSE, recpt = FALSE, fnnpercent = 10, typeami = "maxlag")
ans <- optimizeParam(ts1T,ts2T,par, min.rec = 3.5, max.rec = 4.5)
#Use results for crqa
ResultsR_TT <- try(crqa(ts1T, ts2T, embed = 3, delay = 35, radius = 27.47867, normalize = 0, rescale = 2, mindiagline = 2, minvertline = 2))
ResultsR_TT
#Plot crqa
RP_TT=ResultsR_TT$RP
RP_TT = matrix(as.numeric(RP_TT), nrow = ncol(RP_TT))
cols = c("white","blue4")
image(RP_TT, xlab = "", ylab = "", col = cols)
#Heartrate
#Make into timeseries
Hrts1_TT <- ts(d1$HR1TTS, start = 1.3286227559, frequency = 90)
Hrts2_TT <- ts(d1$HR2TTS, start = 0.93718955, frequency = 90)
#optimize paramters
optimizeParam(Hrts1, Hrts2_TT, par, min.rec = 2, max.rec = 5)
par = list(lgM =  35, radiusspan = 400, radiussample = 10, normalize = 0, rescale = 1, mindiagline = 2,
minvertline = 2, tw = 0, whiteline = FALSE, recpt = FALSE, fnnpercent = 10, typeami = "maxlag")
ans <- optimizeParam(Hrts1_TT,Hrts2_TT,par, min.rec = 3.5, max.rec = 4.5)
#Use results for crqa
ResultsHR_TT <- try(crqa(Hrts1_TT,Hrts2_TT, embed = 1, delay = 7, radius = 8.308229, normalize = 0, rescale = 2, mindiagline = 2, minvertline = 2))
Results
#Plot crqa
RPHR_TT=ResultsHR_TT$RP
RPHR_TT = matrix(as.numeric(RPHR_TT), nrow = ncol(RPHR_TT))
cols = c("white","blue4")
image(RPHR_TT, xlab = "", ylab = "", col = cols)
grobs = list(RPHR_TT, RP)
library(gridExtra)
gridExtra::grid.arrange(RPHR_TT, RP)
# Chunk 6
files = list.files(path = "~/R/R - Datascripts/Assignment 4/Heart-and-Respiration/CleanData",pattern=".csv")
print(files)
#Drop selfpaced files.
files_dbf <- files[-grep("SelfPaced.csv", files, fixed=T)]
print(files.dbf)
#Preprocessing
downscale <- function(files){
files %>%
group(n = 100, method= "greedy") %>%
dplyr::summarise(
time = mean(time, na.rm = T),
Resp1 = mean(Resp1, na.rm = T),
Resp2 = mean(Resp2, na.rm = T),
HR1 = mean(HR1, na.rm = T),
HR2 = mean(HR2, na.rm = T))
}
scaleMyfile <- function(files){
#TT scale
files$Resp1S=scale(files$Resp1)
files$Resp2S=scale(files$Resp2)
files$HR1S=scale(files$HR1)
files$HR2S=scale(files$HR2)
}
scale(pair5)
for (file in files){
#print(file)
#read the specific file
tempFile = read.table(file, header = T)
#get participant number information
#would like to extract seperate participant, trial and diagnosis info
study[n] = substring(file, 6, 6)
diagnosis[n] = substring(file, 8, 8)
participant[n] = substring(sub("T.*", "", file),8)
trial[n] = sub(".T*", "", sub("\\_.*", "", sub("^[^T]*", "", file)))
#optimizeparam functions
par = list(lgM = 50, steps = seq(1, 6, 1), radiusspan = 100, radiussample = 40, normalize = 0, rescale = 0, mindiagline = 2, minvertline = 2, tw = 0, whiteline = F, recpt = FALSE, fnnpercent = 10, typeami = "mindip")
ans = try(optimizeParam(tempFile$f0, tempFile$f0, par))
#print(ans)
#if statement: If having problem with optimizeparam, it will append NA
if (length(ans) > 1){
radius[n] = ans[1]
embed[n] = ans[2]
delay[n] = ans[3]
}
else {
radius[n] = NA
embed[n] = NA
delay[n] = NA
}
n = n+1
print(n)
}
#Need to unlist it in order to make it a list!
delay = unlist(delay)
embed = unlist(embed)
radius = unlist(radius)
df = data.frame(participant, diagnosis, study, trial, embed, delay, radius)
#Write to datafile to avoid looping through all of them again
write.csv(df, file = "dataExtractSchizo.csv", row.names = F)
View(pair5_TT)
Sync_data = pair5 %>%
group(n = 100, method= "greedy") %>%
dplyr::summarise(
time = mean(time, na.rm = T),
Resp1 = mean(Resp1, na.rm = T),
Resp2 = mean(Resp2, na.rm = T),
HR1 = mean(HR1, na.rm = T),
HR2 = mean(HR2, na.rm = T))
TT_data = pair5 %>%
group(n = 100, method= "greedy") %>%
dplyr::summarise(
time = mean(time, na.rm = T),
Resp1 = mean(Resp1, na.rm = T),
Resp2 = mean(Resp2, na.rm = T),
HR1 = mean(HR1, na.rm = T),
HR2 = mean(HR2, na.rm = T))
ced files.
files <- files[-grep("SelfPaced.csv", files, fixed=T)]
print(files)
downscale <- function(files){
files %>%
group(n = 100, method= "greedy") %>%
dplyr::summarise(
time = mean(time, na.rm = T),
Resp1 = mean(Resp1, na.rm = T),
Resp2 = mean(Resp2, na.rm = T),
HR1 = mean(HR1, na.rm = T),
HR2 = mean(HR2, na.rm = T))
}
scaleMyfile <- function(files){
#TT scale
files$Resp1S=scale(files$Resp1)
files$Resp2S=scale(files$Resp2)
files$HR1S=scale(files$HR1)
files$HR2S=scale(files$HR2)
}
scaleMyfile(pair5)
files$
scaleMyfile(pair5)
pair1 = read.table("~/R/R - Datascripts/Assignment 4/Heart-and-Respiration/CleanData/Study1_G1_T1_Synchronous.csv", header=T, sep = ",")
downscale(pair1)
scaleMyfile(pair1)
print(pair1)
View(pair1)
dwnscaled1 <- downscale(pair1)
View(dwnscaled1)
scld1 <- scaleMyfile(pair1)
dwnscaled1 <- downscale(pair1)
scld1 <- scaleMyfile(dwnscaled1)
dwnscaled1 <- downscale(pair1)
dwnscaled1 <- scaleMyfile(dwnscaled1)
dwnscaled1 <- downscale(pair1)
scaleMyfile(dwnscaled1)
View(dwnscaled1)
dwnscaled1 <- downscale(pair1)
scaleMyfile(dwnscaled1)
pair1 = read.table("~/R/R - Datascripts/Assignment 4/Heart-and-Respiration/CleanData/Study1_G1_T1_Synchronous.csv", header=T, sep = ",")
dwnscaled1 <- downscale(pair1)
scaleMyfile(dwnscaled1)
pair1 = read.table("~/R/R - Datascripts/Assignment 4/Heart-and-Respiration/CleanData/Study1_G1_T1_Synchronous.csv", header=T, sep = ",")
dwnscaled12 <- downscale(pair1)
View(dwnscaled12)
scaleMyfile(dwnscaled1)
dwnscaled12 <- downscale(pair1)
scaleMyfile(dwnscaled1)
scaleMyfile <- function(files){
files %>%
files$Resp1S=scale(files$Resp1)
files$Resp2S=scale(files$Resp2)
files$HR1S=scale(files$HR1)
files$HR2S=scale(files$HR2)
}
scaleMyfile(dwnscaled1)
for (file in files){
#print(file)
#read the specific file
fileName = read.table(files, header = T)
downscale(fileName)
preProcess(fileName, method = c("scale"))
dataName = paste("CleanFiles", files, sep = ",")
write.csv(fileName, files = dataName)
#get participant number information
#would like to extract seperate participant, trial and diagnosis info
}
for (file in files){
#print(file)
#read the specific file
fileName = read.table(files, header = T)
downscale(fileName)
preProcess(fileName, method = c("scale"))
fileName = paste("CleanFiles", files, sep = ",")
write.csv(fileName, files = dataName)
#get participant number information
#would like to extract seperate participant, trial and diagnosis info
}
#print(file)
print(file)
for (file in files){
#print(file)
print(file)
for (file in files){
#print(file)
print(file)
}
for (file in files){
#print(file)
print(file)
}
for (file in files){
#print(file)
print(file)
#read the specific file
downscale(file)
preProcess(file, method = c("scale"))
fileName = paste("CleanFiles", file, sep = ",")
write.csv(data, file = fileName)
#get participant number information
#would like to extract seperate participant, trial and diagnosis info
}
for (file in files){
#print(file)
print(file)
dataName = files)
data = read.csv(dataName)
#read the specific file
downscale(file)
preProcess(file, method = c("scale"))
fileName = paste("CleanFiles", file, sep = ",")
write.csv(data, file = fileName)
#get participant number information
#would like to extract seperate participant, trial and diagnosis info
}
for (file in files){
#print(file)
print(file)
dataName = files)
data = read.csv(dataName)
#read the specific file
downscale(file)
preProcess(file, method = c("scale"))
fileName = paste("CleanFiles", file, sep = ",")
write.csv(data, file = fileName)
#get participant number information
#would like to extract seperate participant, trial and diagnosis info
})
for (file in files){
#print(file)
print(file)
dataName = (files)
data = read.csv(dataName)
#read the specific file
downscale(file)
preProcess(file, method = c("scale"))
fileName = paste("CleanFiles", file, sep = ",")
write.csv(data, file = fileName)
#get participant number information
#would like to extract seperate participant, trial and diagnosis info
}
preProcess(pair1, method = c("scale"))
processData <- lapply(function(x){
#print(file)
print(file)
x = files
#read the specific file
downscale(file)
data$Resp1 = removeOuts(data$Resp1, threshold)
data$Resp2 = removeOuts(data$Resp2, threshold)
data$HR1 = removeOuts(data$HR1, threshold)
data$HR2 = removeOuts(data$HR2, threshold)
#TT scale
data$Resp1S=scale(data$Resp1)
data$Resp2S=scale(data$Resp2)
data$HR1S=scale(data$HR1)
data$HR2S=scale(data$HR2)
fileName = paste("CleanFiles", file, sep = ",")
write.csv(data, file = fileName)
#get participant number information
#would like to extract seperate participant, trial and diagnosis info
})
processData <- (function(files){
#print(file)
print(files)
data = files
#read the specific file
downscale(data)
data$Resp1 = removeOuts(data$Resp1, threshold)
data$Resp2 = removeOuts(data$Resp2, threshold)
data$HR1 = removeOuts(data$HR1, threshold)
data$HR2 = removeOuts(data$HR2, threshold)
#TT scale
data$Resp1S=scale(data$Resp1)
data$Resp2S=scale(data$Resp2)
data$HR1S=scale(data$HR1)
data$HR2S=scale(data$HR2)
fileName = paste("CleanFiles", file, sep = ",")
write.csv(data, file = fileName)
#get participant number information
#would like to extract seperate participant, trial and diagnosis info
})
processData(files)
processData <- (function(files){
#print(file)
print(files)
data = length(files)
#read the specific file
downscale(data)
data$Resp1 = removeOuts(data$Resp1, threshold)
data$Resp2 = removeOuts(data$Resp2, threshold)
data$HR1 = removeOuts(data$HR1, threshold)
data$HR2 = removeOuts(data$HR2, threshold)
#TT scale
data$Resp1S=scale(data$Resp1)
data$Resp2S=scale(data$Resp2)
data$HR1S=scale(data$HR1)
data$HR2S=scale(data$HR2)
fileName = paste("CleanFiles", file, sep = ",")
write.csv(data, file = fileName)
#get participant number information
#would like to extract seperate participant, trial and diagnosis info
})
processData(files)
write.csv(files, filename = CleanData2)
write.csv(files, file = "CleanData2.csv", row.names = F)
files = list.files(path = "~/R/R - Datascripts/Assignment 4/Heart-and-Respiration/CleanData",pattern=".csv")
#Drop selfpaced files.
files <- files[-grep("SelfPaced.csv", files, fixed=T)]
print(files)
write.csv(files, file = "CleanData2.csv", row.names = F)
myfiles = do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = TRUE, sep = ";")))
files = (path = "~/R/R - Datascripts/Assignment 4/Heart-and-Respiration/CleanData", pattern=".csv")
files = (path = "~/R/R - Datascripts/Assignment 4/Heart-and-Respiration/CleanData",pattern=".csv")
files = read.delim(path = "~/R/R - Datascripts/Assignment 4/Heart-and-Respiration/CleanData",pattern=".csv")
files = list.files(path = "~/R/R - Datascripts/Assignment 4/Heart-and-Respiration/CleanData",pattern=".csv")
#Drop selfpaced files.
files <- files[-grep("SelfPaced.csv", files, fixed=T)]
print(files)
myfiles = do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = TRUE, sep = ";")))
myfiles = do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE, sep = ";")))
